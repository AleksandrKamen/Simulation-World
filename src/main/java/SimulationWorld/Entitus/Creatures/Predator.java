package SimulationWorld.Entitus.Creatures;

import SimulationWorld.Entitus.DeadCreature;
import SimulationWorld.Entitus.Entity;
import SimulationWorld.Icon.Icons;
import SimulationWorld.Map.Coordinates;
import SimulationWorld.Map.MapWorld;

import java.util.ArrayList;

public class Predator extends Creature { // –ö–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π - —Ö–∏—â–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
    private final Integer attackPower;

    public Predator(Coordinates coordinates, Integer speed, Integer HP, Integer attackPower) {
        super(coordinates, speed, HP);
        this.attackPower = attackPower;
    }

    @Override
    public void makeMove(MapWorld map) {
        super.makeMove(map);
        if (HP > 0) {
            for (Entity e : getnearEntity(map))                           // –ï—Å–ª–∏ –ø–æ –ø–±–ª–∏–∑–æ—Å—Ç–∏ –µ—Å—Ç—å —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ - –Ω–∞–ø–∞–¥–∞–µ—Ç
                if (e instanceof Herbivore) {
                    eat((Herbivore) e, map);
                    break;
                }
            if (!satiety) {
                if (path(map, Herbivore.class) != null) { // –ï—Å–ª–∏ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å - –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ
                    var list = path(map, Herbivore.class);
                    map.removeCreature(this, list.get(speed));
                } else { // –ï—Å–ª–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ –∏ —Ä—è–¥–æ–º –µ—Å—Ç—å –¥—Ä—É–≥–æ–π —Ö–∏—â–Ω–∏–∫ - –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ –Ω–µ–≥–æ
                    for (Entity entity : getnearEntity(map)) {
                        if (entity instanceof Predator) {
                            eat((Predator) entity, map);
                            break;
                        }
                    }
                    if (!satiety && this.path(map, Predator.class) != null) { // –ï—Å–ª–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ –∏ —Ä—è–¥–æ–º –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ —Ö–∏—â–Ω–∏–∫–∞ - –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ö–∏—â–Ω–∏–∫–∞
                        ArrayList<Coordinates> list = path(map, Predator.class);
                        map.removeCreature(this, list.get(speed));
                    }
                }
            }
        } else {
            map.PredDead++;
            Coordinates coordinates1 = coordinates;
            map.getMapWorld().remove(coordinates1);
            map.setEntity(coordinates1, new DeadCreature(coordinates1, Icons.DeadObject[0]));
        }

    }                                                        // –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ö–æ–¥ —Ö–∏—â–Ω–∏–∫–∞

    public <T extends Creature> void eat(T prey, MapWorld world) {
        prey.HP -= attackPower;
        if (!prey.icon.contains(Icons.otherIcons[0]))
            prey.icon += Icons.otherIcons[0];  // –ï—Å–ª–∏ —Ö–∏—â–Ω–∏–∫ –Ω–∞–ø–∞–ª –Ω–∞ –∂–µ—Ä—Ç–≤—É - –¥–æ–ø–æ–ª–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É –∂–µ—Ä—Ç–≤—ã ü©∏
        HP += prey.HP <= 0 ? attackPower + prey.HP : attackPower;
        if (prey.HP <=0){
            if (prey.getClass().getSimpleName().equals("Predator")){
                world.PredDead++;
            } else world.HerbDead++;
            Coordinates coordinates1 = prey.coordinates;
            world.getMapWorld().remove(coordinates1);
            world.setEntity(coordinates1, new DeadCreature(coordinates1, Icons.DeadObject[0]));

        }
        satiety = true;
    }                                                // –Ω–∞–ø–∞—Å—Ç—å  –∂–∏–≤–æ—Ç–Ω–æ–µ

    @Override
    public String getRandomIcon() {
        return Icons.PredIcon[(int) (Math.random() * Icons.PredIcon.length)];
    }                                         // –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–∫–æ–Ω–∫—É
}